// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
class HelloResponse;
class HelloResponseDefaultTypeInternal;
extern HelloResponseDefaultTypeInternal _HelloResponse_default_instance_;
class HelloWorld;
class HelloWorldDefaultTypeInternal;
extern HelloWorldDefaultTypeInternal _HelloWorld_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::HelloResponse* Arena::CreateMaybeMessage<::HelloResponse>(Arena*);
template<> ::HelloWorld* Arena::CreateMaybeMessage<::HelloWorld>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class HelloWorld PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:HelloWorld) */ {
 public:
  inline HelloWorld() : HelloWorld(nullptr) {};
  virtual ~HelloWorld();

  HelloWorld(const HelloWorld& from);
  HelloWorld(HelloWorld&& from) noexcept
    : HelloWorld() {
    *this = ::std::move(from);
  }

  inline HelloWorld& operator=(const HelloWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloWorld& operator=(HelloWorld&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const HelloWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloWorld* internal_default_instance() {
    return reinterpret_cast<const HelloWorld*>(
               &_HelloWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HelloWorld& a, HelloWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloWorld* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloWorld* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloWorld* New() const final {
    return CreateMaybeMessage<HelloWorld>(nullptr);
  }

  HelloWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloWorld>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const HelloWorld& from);
  void MergeFrom(const HelloWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HelloWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HelloWorld";
  }
  protected:
  explicit HelloWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrHelloFieldNumber = 1,
    kAgeFieldNumber = 2,
    kWeightFieldNumber = 3,
    kSizeFieldNumber = 4,
  };
  // string strHello = 1;
  void clear_strhello();
  const std::string& strhello() const;
  void set_strhello(const std::string& value);
  void set_strhello(std::string&& value);
  void set_strhello(const char* value);
  void set_strhello(const char* value, size_t size);
  std::string* mutable_strhello();
  std::string* release_strhello();
  void set_allocated_strhello(std::string* strhello);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_strhello();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_strhello(
      std::string* strhello);
  private:
  const std::string& _internal_strhello() const;
  void _internal_set_strhello(const std::string& value);
  std::string* _internal_mutable_strhello();
  public:

  // int32 age = 2;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float weight = 3;
  void clear_weight();
  float weight() const;
  void set_weight(float value);
  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);
  public:

  // float size = 4;
  void clear_size();
  float size() const;
  void set_size(float value);
  private:
  float _internal_size() const;
  void _internal_set_size(float value);
  public:

  // @@protoc_insertion_point(class_scope:HelloWorld)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strhello_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  float weight_;
  float size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class HelloResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:HelloResponse) */ {
 public:
  inline HelloResponse() : HelloResponse(nullptr) {};
  virtual ~HelloResponse();

  HelloResponse(const HelloResponse& from);
  HelloResponse(HelloResponse&& from) noexcept
    : HelloResponse() {
    *this = ::std::move(from);
  }

  inline HelloResponse& operator=(const HelloResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloResponse& operator=(HelloResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const HelloResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloResponse* internal_default_instance() {
    return reinterpret_cast<const HelloResponse*>(
               &_HelloResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HelloResponse& a, HelloResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloResponse* New() const final {
    return CreateMaybeMessage<HelloResponse>(nullptr);
  }

  HelloResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const HelloResponse& from);
  void MergeFrom(const HelloResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HelloResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HelloResponse";
  }
  protected:
  explicit HelloResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // string response = 1;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_response();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_response(
      std::string* response);
  private:
  const std::string& _internal_response() const;
  void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // @@protoc_insertion_point(class_scope:HelloResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HelloWorld

// string strHello = 1;
inline void HelloWorld::clear_strhello() {
  strhello_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HelloWorld::strhello() const {
  // @@protoc_insertion_point(field_get:HelloWorld.strHello)
  return _internal_strhello();
}
inline void HelloWorld::set_strhello(const std::string& value) {
  _internal_set_strhello(value);
  // @@protoc_insertion_point(field_set:HelloWorld.strHello)
}
inline std::string* HelloWorld::mutable_strhello() {
  // @@protoc_insertion_point(field_mutable:HelloWorld.strHello)
  return _internal_mutable_strhello();
}
inline const std::string& HelloWorld::_internal_strhello() const {
  return strhello_.Get();
}
inline void HelloWorld::_internal_set_strhello(const std::string& value) {
  
  strhello_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HelloWorld::set_strhello(std::string&& value) {
  
  strhello_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HelloWorld.strHello)
}
inline void HelloWorld::set_strhello(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strhello_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:HelloWorld.strHello)
}
inline void HelloWorld::set_strhello(const char* value,
    size_t size) {
  
  strhello_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HelloWorld.strHello)
}
inline std::string* HelloWorld::_internal_mutable_strhello() {
  
  return strhello_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HelloWorld::release_strhello() {
  // @@protoc_insertion_point(field_release:HelloWorld.strHello)
  return strhello_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HelloWorld::set_allocated_strhello(std::string* strhello) {
  if (strhello != nullptr) {
    
  } else {
    
  }
  strhello_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strhello,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HelloWorld.strHello)
}
inline std::string* HelloWorld::unsafe_arena_release_strhello() {
  // @@protoc_insertion_point(field_unsafe_arena_release:HelloWorld.strHello)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return strhello_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HelloWorld::unsafe_arena_set_allocated_strhello(
    std::string* strhello) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (strhello != nullptr) {
    
  } else {
    
  }
  strhello_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      strhello, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HelloWorld.strHello)
}

// int32 age = 2;
inline void HelloWorld::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HelloWorld::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HelloWorld::age() const {
  // @@protoc_insertion_point(field_get:HelloWorld.age)
  return _internal_age();
}
inline void HelloWorld::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void HelloWorld::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:HelloWorld.age)
}

// float weight = 3;
inline void HelloWorld::clear_weight() {
  weight_ = 0;
}
inline float HelloWorld::_internal_weight() const {
  return weight_;
}
inline float HelloWorld::weight() const {
  // @@protoc_insertion_point(field_get:HelloWorld.weight)
  return _internal_weight();
}
inline void HelloWorld::_internal_set_weight(float value) {
  
  weight_ = value;
}
inline void HelloWorld::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:HelloWorld.weight)
}

// float size = 4;
inline void HelloWorld::clear_size() {
  size_ = 0;
}
inline float HelloWorld::_internal_size() const {
  return size_;
}
inline float HelloWorld::size() const {
  // @@protoc_insertion_point(field_get:HelloWorld.size)
  return _internal_size();
}
inline void HelloWorld::_internal_set_size(float value) {
  
  size_ = value;
}
inline void HelloWorld::set_size(float value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:HelloWorld.size)
}

// -------------------------------------------------------------------

// HelloResponse

// string response = 1;
inline void HelloResponse::clear_response() {
  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HelloResponse::response() const {
  // @@protoc_insertion_point(field_get:HelloResponse.response)
  return _internal_response();
}
inline void HelloResponse::set_response(const std::string& value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:HelloResponse.response)
}
inline std::string* HelloResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:HelloResponse.response)
  return _internal_mutable_response();
}
inline const std::string& HelloResponse::_internal_response() const {
  return response_.Get();
}
inline void HelloResponse::_internal_set_response(const std::string& value) {
  
  response_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HelloResponse::set_response(std::string&& value) {
  
  response_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HelloResponse.response)
}
inline void HelloResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:HelloResponse.response)
}
inline void HelloResponse::set_response(const char* value,
    size_t size) {
  
  response_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HelloResponse.response)
}
inline std::string* HelloResponse::_internal_mutable_response() {
  
  return response_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HelloResponse::release_response() {
  // @@protoc_insertion_point(field_release:HelloResponse.response)
  return response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HelloResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HelloResponse.response)
}
inline std::string* HelloResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:HelloResponse.response)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return response_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HelloResponse::unsafe_arena_set_allocated_response(
    std::string* response) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (response != nullptr) {
    
  } else {
    
  }
  response_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      response, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HelloResponse.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
